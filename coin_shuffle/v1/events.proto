syntax = "proto3";

package coin_shuffle.v1;

import "coin_shuffle/v1/types.proto";

message ShuffleError {
  string error = 1;

  enum Code {
    CODE_UNSPECIFIED = 0;
  }
}

message ShuffleEvent {
  // Unique event identifier
  string id = 1;

  oneof body {
    // 0. An error acquired on one of the steps below
    ShuffleError error = 2;
    // 1. Receiving of this event means starting of the shuffle process.
    ShuffleInfo shuffle_info = 3;
    // 2. Receiving of encoded outputs of all participants in the room.
    //    After that participant using `ShuffleRound` RPC MUST pass decoded
    //    outputs to continue shuffle process.
    EncodedOutputs encoded_outputs = 4;
    // 3. Receiving decoded outputs of all participants in the room.
    //    After receiving this event, participant MUST pass signature of
    //    concatenation of his input and outputs of all other participants
    //    using `SignShuffleTx` RPC.
    TxSigningOutputs tx_signing_outputs = 5;
    // 4. The result transaction hash. The shuffle process is finished.
    ShuffleTxHash shuffle_tx_hash = 6;
  }
}

message ShuffleInfo {
  // Shuffle participants number
  uint32 participants_number = 1;

  // Participant's serial number in the shuffle process
  uint32 node_serial_number = 2;

  // HEX encoded shuffle participants public keys.
  // Unique for every user depend on serial number
  repeated RsaPublicKey public_keys_list = 3;

  // Token given for accessing room in shuffle process
  string shuffle_access_token = 4;
}

message EncodedOutputs {
  // RSA encoded shuffle participants outputs equal to output addresses
  repeated bytes outputs = 1;
}

message TxSigningOutputs {
  // Transaction outputs for signing
  repeated bytes outputs = 1;
}

message ShuffleTxHash {
  // Shuffle transaction hash
  bytes tx_hash = 1;
}
