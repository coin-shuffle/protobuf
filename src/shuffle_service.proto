syntax = "proto3";

package coin_shuffle.node;

message Empty {}

message ErrorMessage {
  string error = 1;

  enum Code {
    INTERNAL = 0;
  }
}

message ServiceResponse {
  // Unique response identifier
  string id = 1;

  oneof EmptyResponseBody {
    Empty                     empty      = 2;
    ErrorMessage              error      = 3;
    RoomAccessJWT             access_jwt = 4;
    IsReadyForShuffleResponse ready      = 5;
  }
}

message P2PEvent {
  // Unique event identifier
  string id = 1;

  oneof P2PEventBody {
    ErrorMessage     error           = 2;
    ShuffleInfo      shuffle_info    = 3;
    EncodedOutputs   encoded_outputs = 4;
    TxSigningOutputs tx_signing_data = 5;
    ShuffleTxHash    shuffle_tx_hash = 6;
  }
}

message ServiceRequest {
  // Unique request identifier
  string        id  = 1;
  RoomAccessJWT jwt = 2;

  oneof ServiceRequestBody {
    ErrorMessage             error                = 3;
    JoinShuffleProcess       join_shuffle_process = 4;
    DecodedOutputs           decodedOutputs       = 5;
    TxSign                   tx_sgin              = 6;
    ShuffleTxHash            shuffle_tx_hash      = 7;
    IsReadyForShuffleRequest ready                = 8;
  }
}

message EncodedOutputs {
  // RSA encoded shuffle participants outputs equal to output addresses
  repeated string outputs_list = 1;
}

message DecodedOutputs {
  // HEX encoded shuffle participants outputs; equal to output addresses
  repeated string outputs_list = 1;
}

message TxSign {
  // HEX encoded tx signature
  string tx_sign = 1;
}

message ShuffleInfo {
  // Shuffle participants number
  int32 participants_number = 1;

  // Participant's serial number in the shuffle process
  int32 node_serial_number  = 2;

  // HEX encoded shuffle participants public keys.
  // Unique for every user depend on serial number
  repeated string public_keys_list = 3;
}

message ParticipantPublicKey {
  // HEX encoded shuffle participant public key
  string public_key = 1;
}

message TxSigningOutputs {
  // Transaction outputs for signing
  repeated string outputs = 1;
}

message ShuffleTxHash {
  // Shuffle transaction hash
  string tx_hash = 1;
}

message CheckRoomStatus {
  // JWT generated when participant joined the room
  RoomAccessJWT jwt = 1;
}

message RoomAccessJWT {
  // header:    base64({"alg":"HS256","typ":"JWT"})
  // payload:   base64({"room_id":"2ee1deab-40b0-4155-b8ab-b2c253e9f6f6","exp":"123456789"})
  // signature: base64(HMACSHA256(header.payload, secret))
  // jwt:       header.payload.signature
  string jwt = 1;
}

message JoinShuffleRoomRequest {
  // UTXO id that shuffle participant wanna use for shuffle
  string utxo = 1;

  // ECDSA Signature of the UTXO ID with the UTXO owner private key
  string sign = 2;
}

message JoinShuffleProcess {
  // JWT generated when participant joined the room
  RoomAccessJWT jwt = 1;

  // Participant's public key
  string public_key = 2;
}

message IsReadyForShuffleRequest {
  RoomAccessJWT jwt = 1;
}

message IsReadyForShuffleResponse {
  bool ready = 1;
}

service ShuffleService {
  rpc JoinShuffleRoom(JoinShuffleRoomRequest) returns(ServiceResponse);
  rpc ConnectShuffleRoom(ServiceRequest) returns(stream P2PEvent);

  rpc IsReadyForShuffle(ServiceRequest) returns(ServiceResponse);

  rpc ShuffleRound(ServiceRequest) returns(ServiceResponse);
  rpc SignShuffleTx(ServiceRequest) returns(ServiceResponse);
  rpc ShuffleTxHash(ServiceRequest) returns(ServiceResponse);
}
